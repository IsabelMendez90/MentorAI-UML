import streamlit as st
from openai import OpenAI
import json
import pandas as pd
import re
from datetime import datetime
from io import BytesIO
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT


# Leer la API Key desde Streamlit Secrets
API_KEY = st.secrets["OPENROUTER_API_KEY"]
API_BASE = "https://openrouter.ai/api/v1"
MODEL_NAME = "deepseek/deepseek-r1:free"

# Instrucciones del sistema
INSTRUCCIONES_SISTEMA = """
Eres un asistente experto en dise√±o de productos como integrador de sistemas mecatr√≥nicos. Tu tarea es ayudar a generar soluciones para funciones de productos. 
Cuando el usuario proporcione una funci√≥n, y su contexto de aplicaci√≥n, debes responder con 5 soluciones t√©cnicas viables, diversas y contextualizadas. Usa un lenguaje t√©cnico, claro y conciso.
"""

# Inicializar estados de sesi√≥n
if "contexto_general" not in st.session_state:
    st.session_state.contexto_general = {}

if "historial_funciones" not in st.session_state:
    st.session_state.historial_funciones = []

if "respuestas_soluciones" not in st.session_state:
    st.session_state.respuestas_soluciones = []

if "limpiar_input" not in st.session_state:
    st.session_state.limpiar_input = False

if "matriz_generada" not in st.session_state:
    st.session_state.matriz_generada = False

if "combinaciones_generadas" not in st.session_state:
    st.session_state.combinaciones_generadas = []

# Funci√≥n para obtener respuesta del modelo

def obtener_respuesta_funcion(mensaje):
     try:
         mensajes = [
             {"role": "system", "content": INSTRUCCIONES_SISTEMA},
             {"role": "user", "content": mensaje}
         ]
         client = OpenAI(api_key=API_KEY, base_url=API_BASE)
         completion = client.chat.completions.create(
             model=MODEL_NAME,
             messages=mensajes,
             extra_headers={
                 "HTTP-Referer": "https://mentor-ai-morpho.streamlit.app/",  
                 "X-Title": "Mentor-AI Matriz Morfologica"
             }
         )
         if completion and completion.choices:
             return completion.choices[0].message.content
         else:
             return "‚ö†Ô∏è No se recibi√≥ una respuesta v√°lida del modelo. Intenta nuevamente."
     except Exception as e:
         return f"‚ùå Error al conectarse con el modelo: {str(e)}"


# Configuraci√≥n de p√°gina
st.set_page_config(page_title="Mentor-AI Matriz Morfol√≥gica", layout="wide")
st.title("ü§ñ Challenge Mentor AI - Matriz Morfol√≥gica")
st.markdown(
    "Creadores: Dra. J. Isabel M√©ndez Gardu√±o & M.Sc. Miguel de J. Ram√≠rez C., CMfgT ")
st.subheader("Asistente interactivo")
st.markdown("Este asistente te ayuda a generar una matriz morfol√≥gica con soluciones para cada funci√≥n t√©cnica de tu producto.")



# Paso 1: Formulario de contexto
with st.expander("üìã Completa el contexto general antes de continuar", expanded=True):
    col1, col2 = st.columns(2)
    contexto = col1.text_area("a) Contexto del socio formador")
    reto = col2.text_area("b) Reto espec√≠fico")
    necesidades = st.text_area("c) Necesidades del usuario")
    tareas = st.text_area("d) Tareas del usuario")
    ficha = st.text_area("e) Ficha t√©cnica del prototipo o servicio")

contexto_completo = all([contexto.strip(), reto.strip(), necesidades.strip(), tareas.strip(), ficha.strip()])

if contexto_completo:
    st.session_state.contexto_general = {
        "contexto": contexto,
        "reto": reto,
        "necesidades": necesidades,
        "tareas": tareas,
        "ficha": ficha,
    }

# Paso 2: Historial tipo chat
st.subheader("üí¨ Historial de funciones y soluciones generadas")
if st.session_state.historial_funciones:
    for i in range(len(st.session_state.historial_funciones)):
        st.chat_message("user").write(st.session_state.historial_funciones[i])
        st.chat_message("assistant").markdown(st.session_state.respuestas_soluciones[i])
else:
    st.info("Aqu√≠ aparecer√°n las funciones que ingreses y las soluciones que te sugiera Mentor AI.")

# Mostrar historial de combinaciones
if st.session_state.combinaciones_generadas:
    st.subheader("üß† Combinaciones √≥ptimas generadas:")
    for idx, combinacion in enumerate(st.session_state.combinaciones_generadas, 1):
        st.markdown(f"**Propuesta #{idx}:**")
        st.markdown(combinacion)


# Paso 3: Ingreso de funciones (solo si contexto completo)
st.divider()
st.subheader("‚ûï Ingresa una nueva funci√≥n")

if not contexto_completo:
    st.warning("‚ö†Ô∏è Completa el contexto general antes de ingresar funciones.")
else:
    if st.session_state.limpiar_input:
        st.session_state.funcion_input = ""
        st.session_state.limpiar_input = False

    with st.form("form_funcion"):
        nueva_funcion = st.text_input("üîπ Escribe la funci√≥n del producto", key="funcion_input")
        enviar = st.form_submit_button("Generar soluciones")
        if enviar and nueva_funcion.strip():
            contexto_info = st.session_state.contexto_general
            prompt_funcion = f"""
La funci√≥n del producto es: {nueva_funcion.strip()}.

Aqu√≠ tienes el contexto general del proyecto para generar soluciones m√°s apropiadas:

a) Contexto del socio formador:
{contexto_info['contexto']}

b) Reto espec√≠fico:
{contexto_info['reto']}

c) Necesidades del usuario:
{contexto_info['necesidades']}

d) Tareas del usuario:
{contexto_info['tareas']}

e) Ficha t√©cnica del prototipo:
{contexto_info['ficha']}

Con base en esta informaci√≥n, proporciona exactamente **5 soluciones t√©cnicas posibles** para esta funci√≥n.
Para cada una, sigue este formato:
- Escribe √∫nicamente el **nombre/t√≠tulo** de la soluci√≥n como encabezado.
- Luego agrega una breve descripci√≥n que contenga 4 secciones:
  - Tecnolog√≠a:
  - Funcionamiento:
  - Ventajas:
  - Desventajas:

Al final, si es √∫til, agrega una secci√≥n de **Notas transversales**.
No uses numeraci√≥n ni encabezados como \"Soluci√≥n 1:\", solo el nombre de cada soluci√≥n como t√≠tulo.
"""
            with st.spinner("üß† Generando soluciones..."):
                respuesta = obtener_respuesta_funcion(prompt_funcion)
            st.session_state.historial_funciones.append(nueva_funcion.strip())
            st.session_state.respuestas_soluciones.append(respuesta)
            st.session_state.limpiar_input = True
            st.rerun()

# Matriz morfol√≥gica
st.divider()
if len(st.session_state.historial_funciones) >= 3:
    if st.button("üìÑ Generar Matriz Morfol√≥gica"):
        matriz_data = []
        secciones = ["tecnolog√≠a", "funcionamiento", "ventajas", "desventajas"]

        for i, funcion in enumerate(st.session_state.historial_funciones):
            soluciones_texto = st.session_state.respuestas_soluciones[i]
            lineas = soluciones_texto.strip().split("\n")
            soluciones = []

            for idx, linea in enumerate(lineas):
                linea_clean = linea.strip()
                if not linea_clean:
                    continue
                if not any(sec in linea_clean.lower() for sec in secciones):
                    siguientes = lineas[idx+1:idx+5]  # buscar en las siguientes 4 l√≠neas
                    if any(any(sec in s.lower() for sec in secciones) for s in siguientes):
                        titulo = re.sub(r'^[-‚Ä¢*\d+\s]*', '', linea_clean)
                        titulo = titulo.replace("**", "").strip()
                        soluciones.append(titulo)

            soluciones = (soluciones + ["‚Äî"] * 5)[:5]
            matriz_data.append([funcion] + soluciones)

        df_morfologica = pd.DataFrame(matriz_data, columns=[
            "Funci√≥n", "Soluci√≥n 1", "Soluci√≥n 2", "Soluci√≥n 3", "Soluci√≥n 4", "Soluci√≥n 5"
        ])
        st.session_state.df_morfologica = df_morfologica
        st.session_state.matriz_generada = True

if st.session_state.get("matriz_generada", False):
    st.subheader("üß© Matriz Morfol√≥gica Generada")
    st.dataframe(st.session_state.df_morfologica, use_container_width=True)

    # Paso 5: Generar combinaci√≥n por criterio
    st.divider()
    st.subheader("üéØ Propuestas de combinaci√≥n seg√∫n criterio")

    criterios_predefinidos = [
        "Tecnolog√≠a avanzada",
        "Costo-beneficio",
        "M√°s barato",
        "M√°s realista",
        "R√°pido de implementar",
        "Otro"
    ]

    col1, col2 = st.columns(2)
    criterio_default = col1.selectbox("Selecciona un criterio predefinido:", criterios_predefinidos)

    criterio_personalizado = ""
    if criterio_default == "Otro":
        criterio_personalizado = col2.text_input("Escribe tu propio criterio:")




    if st.button("üîç Generar combinaci√≥n √≥ptima"):
        criterio_final = criterio_personalizado.strip() if criterio_default == "Otro" and criterio_personalizado.strip() else criterio_default

        funciones = st.session_state.historial_funciones
        opciones = []

        for i, soluciones_texto in enumerate(st.session_state.respuestas_soluciones):
            soluciones = []
            lineas = soluciones_texto.strip().split("\n")
            secciones = ["tecnolog√≠a", "funcionamiento", "ventajas", "desventajas"]

            for idx, linea in enumerate(lineas):
                linea_clean = linea.strip()
                if not linea_clean:
                    continue
                if not any(sec in linea_clean.lower() for sec in secciones):
                    siguientes = lineas[idx+1:idx+5]
                    if any(any(sec in s.lower() for sec in secciones) for s in siguientes):
                        titulo = re.sub(r'^[-‚Ä¢*\d+\s]*', '', linea_clean)
                        titulo = titulo.replace("**", "").strip()
                        soluciones.append(titulo)

            soluciones = (soluciones + ["‚Äî"] * 5)[:5]
            opciones.append({"funcion": funciones[i], "opciones": soluciones})

        prompt = f"""
Tienes la siguiente matriz morfol√≥gica con funciones y 5 soluciones posibles por cada una. El criterio de evaluaci√≥n es: "{criterio_final}".

Para cada funci√≥n, selecciona una sola soluci√≥n que sea la mejor bajo este criterio. Por cada selecci√≥n, indica el n√∫mero de soluci√≥n elegida (por ejemplo S1, S2...), y justifica por qu√© la elegiste.

Despu√©s, resume la combinaci√≥n en una sola l√≠nea as√≠:
Criterio: {criterio_final} ‚Üí [Funci√≥n 1 (Sx)] + [Funci√≥n 2 (Sx)] + ...

Estructura tu respuesta as√≠:

Funci√≥n: [nombre]
Soluci√≥n seleccionada: [texto completo de la soluci√≥n] (Sx)
Justificaci√≥n: [una oraci√≥n clara]

Resumen al final:
Criterio: {criterio_final} ‚Üí [Funci√≥n 1 [texto completo de la soluci√≥n]] + [Funci√≥n 2 [texto completo de la soluci√≥n]] + ...
...

Funciones y opciones:
{json.dumps(opciones, indent=2, ensure_ascii=False)}
"""

        with st.spinner("üß† Analizando combinaci√≥n √≥ptima..."):
            resultado_combinacion = obtener_respuesta_funcion(prompt)

        resumen_limpio = resultado_combinacion.replace("Resumen al final:\nCriterio seleccionado ‚Üí", f"Criterio: {criterio_final} ‚Üí")
        st.session_state.combinaciones_generadas.append(resumen_limpio)


def agregar_parrafo_con_formato(doc, texto):
    parrafo = doc.add_paragraph()
    cursor = 0
    while cursor < len(texto):
        if texto[cursor:cursor+2] == '**':
            cursor += 2
            fin = texto.find('**', cursor)
            if fin == -1:
                parrafo.add_run('**' + texto[cursor:])  # por si est√° mal cerrado
                break
            run = parrafo.add_run(texto[cursor:fin])
            run.bold = True
            cursor = fin + 2
        elif texto[cursor] == '*':
            cursor += 1
            fin = texto.find('*', cursor)
            if fin == -1:
                parrafo.add_run('*' + texto[cursor:])
                break
            run = parrafo.add_run(texto[cursor:fin])
            run.italic = True
            cursor = fin + 1
        else:
            fin = cursor
            while fin < len(texto) and texto[fin] != '*' and texto[fin:fin+2] != '**':
                fin += 1
            parrafo.add_run(texto[cursor:fin])
            cursor = fin
    return parrafo



# Mostrar historial de combinaciones
if st.session_state.combinaciones_generadas:
    st.subheader("üß† Combinaciones √≥ptimas generadas:")
    for idx, combinacion in enumerate(st.session_state.combinaciones_generadas, 1):
        st.markdown(f"**Propuesta #{idx}:**")
        st.markdown(combinacion)

    # üîΩ Mostrar botones de descarga SIEMPRE que haya combinaciones
    st.divider()
    st.subheader("üì• Descargar reportes")

    fecha_hora_actual = datetime.now().strftime("%Y%m%d-%H%M")

    doc = Document()
    doc.add_heading("Reporte Mentor-AI: Matriz Morfol√≥gica", level=1)
    doc.add_heading("üìå Contexto General", level=2)
    doc.add_paragraph(f"Contexto del socio formador: {st.session_state.contexto_general['contexto']}")
    doc.add_paragraph(f"Reto espec√≠fico: {st.session_state.contexto_general['reto']}")
    doc.add_paragraph(f"Necesidades del usuario: {st.session_state.contexto_general['necesidades']}")
    doc.add_paragraph(f"Tareas del usuario: {st.session_state.contexto_general['tareas']}")
    doc.add_paragraph(f"Ficha t√©cnica del prototipo: {st.session_state.contexto_general['ficha']}")

    doc.add_heading("üîß Funciones y soluciones generadas", level=2)
    for i, (funcion, respuesta) in enumerate(zip(st.session_state.historial_funciones, st.session_state.respuestas_soluciones)):
        doc.add_heading(f"Funci√≥n {i+1}: {funcion}", level=3)
        for linea in respuesta.split("\n"):
            if linea.strip():
                p = agregar_parrafo_con_formato(doc, linea.strip())
                p.style.font.size = Pt(11)

    doc.add_heading("üéØ Combinaciones √≥ptimas generadas", level=2)
    for i, combinacion in enumerate(st.session_state.combinaciones_generadas):
        doc.add_paragraph(f"Propuesta #{i+1}:")
        for linea in combinacion.split("\n"):
            if linea.strip():
                p = agregar_parrafo_con_formato(doc, linea.strip())
                p.style.font.size = Pt(11)

    buffer_word = BytesIO()
    doc.save(buffer_word)
    buffer_word.seek(0)
    st.download_button(
        label="üìÑ Descargar Word",
        data=buffer_word,
        file_name=f"{fecha_hora_actual}-Reporte_M-Morfologica.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

    if "df_morfologica" in st.session_state:
        buffer_excel = BytesIO()
        st.session_state.df_morfologica.to_excel(buffer_excel, index=False)
        buffer_excel.seek(0)
        st.download_button(
            label="üìä Descargar Excel",
            data=buffer_excel,
            file_name=f"{fecha_hora_actual}-Tabla_M-Morfologica.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
